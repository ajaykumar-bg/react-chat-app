{"version":3,"file":"static/js/446.cb90ca86.chunk.js","mappings":"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","sources":["features/Chat/chat.constants.js","features/Chat/components/ChatSidebarHeader.jsx","features/Chat/chat.utils.js","features/Chat/components/UserListItem.jsx","features/Chat/components/ChatSidebar.jsx","features/Chat/components/ChatHeader.jsx","features/Chat/components/MessageBubble.jsx","features/Chat/components/TypingIndicator.jsx","features/Chat/components/MessageList.jsx","features/Chat/components/MessageInput.jsx","features/Chat/components/ChatWindow.jsx","features/Chat/components/ConnectionStatus.jsx","features/Chat/services/WebSocketService.js","features/Chat/context/ChatContext.jsx","features/Chat/Chat.jsx"],"sourcesContent":["// Mock data for users and chat messages\r\nexport const mockUsers = [\r\n  {\r\n    id: 1,\r\n    name: 'Alice Johnson',\r\n    avatar: 'https://i.pravatar.cc/150?img=1',\r\n    status: 'online',\r\n    lastSeen: new Date(),\r\n    lastMessage: 'Hey there! How are you doing?',\r\n    lastMessageTime: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago\r\n    unreadCount: 2,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Bob Smith',\r\n    avatar: 'https://i.pravatar.cc/150?img=2',\r\n    status: 'offline',\r\n    lastSeen: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago\r\n    lastMessage: 'Thanks for your help!',\r\n    lastMessageTime: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\r\n    unreadCount: 0,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Carol Davis',\r\n    avatar: 'https://i.pravatar.cc/150?img=3',\r\n    status: 'online',\r\n    lastSeen: new Date(),\r\n    lastMessage: 'Can we schedule a meeting?',\r\n    lastMessageTime: new Date(Date.now() - 15 * 60 * 1000), // 15 minutes ago\r\n    unreadCount: 1,\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'David Wilson',\r\n    avatar: 'https://i.pravatar.cc/150?img=4',\r\n    status: 'away',\r\n    lastSeen: new Date(Date.now() - 10 * 60 * 1000), // 10 minutes ago\r\n    lastMessage: 'See you tomorrow!',\r\n    lastMessageTime: new Date(Date.now() - 45 * 60 * 1000), // 45 minutes ago\r\n    unreadCount: 0,\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Eva Brown',\r\n    avatar: 'https://i.pravatar.cc/150?img=5',\r\n    status: 'online',\r\n    lastSeen: new Date(),\r\n    lastMessage: \"Perfect! Let me know when you're ready.\",\r\n    lastMessageTime: new Date(Date.now() - 1 * 60 * 1000), // 1 minute ago\r\n    unreadCount: 3,\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Frank Miller',\r\n    avatar: 'https://i.pravatar.cc/150?img=6',\r\n    status: 'online',\r\n    lastSeen: new Date(),\r\n    lastMessage: 'Just saw your message, will reply soon!',\r\n    lastMessageTime: new Date(Date.now() - 8 * 60 * 1000), // 8 minutes ago\r\n    unreadCount: 1,\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Grace Chen',\r\n    avatar: 'https://i.pravatar.cc/150?img=7',\r\n    status: 'away',\r\n    lastSeen: new Date(Date.now() - 20 * 60 * 1000), // 20 minutes ago\r\n    lastMessage: 'Looking forward to the weekend!',\r\n    lastMessageTime: new Date(Date.now() - 3 * 60 * 60 * 1000), // 3 hours ago\r\n    unreadCount: 0,\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Henry Adams',\r\n    avatar: 'https://i.pravatar.cc/150?img=8',\r\n    status: 'offline',\r\n    lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\r\n    lastMessage: 'Thanks for the update! 👍',\r\n    lastMessageTime: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\r\n    unreadCount: 0,\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Isabella Rodriguez',\r\n    avatar: 'https://i.pravatar.cc/150?img=9',\r\n    status: 'online',\r\n    lastSeen: new Date(),\r\n    lastMessage: 'Can you check the latest document?',\r\n    lastMessageTime: new Date(Date.now() - 25 * 60 * 1000), // 25 minutes ago\r\n    unreadCount: 2,\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Jack Thompson',\r\n    avatar: 'https://i.pravatar.cc/150?img=11',\r\n    status: 'away',\r\n    lastSeen: new Date(Date.now() - 15 * 60 * 1000), // 15 minutes ago\r\n    lastMessage: 'Great work on the project! 🎉',\r\n    lastMessageTime: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 hours ago\r\n    unreadCount: 0,\r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'Kelly Wang',\r\n    avatar: 'https://i.pravatar.cc/150?img=12',\r\n    status: 'online',\r\n    lastSeen: new Date(),\r\n    lastMessage: 'Meeting rescheduled to 3 PM',\r\n    lastMessageTime: new Date(Date.now() - 35 * 60 * 1000), // 35 minutes ago\r\n    unreadCount: 1,\r\n  },\r\n  {\r\n    id: 12,\r\n    name: 'Leo Garcia',\r\n    avatar: 'https://i.pravatar.cc/150?img=13',\r\n    status: 'offline',\r\n    lastSeen: new Date(Date.now() - 8 * 60 * 60 * 1000), // 8 hours ago\r\n    lastMessage: 'Have a great day everyone!',\r\n    lastMessageTime: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\r\n    unreadCount: 0,\r\n  },\r\n];\r\n\r\nexport const mockMessages = {\r\n  1: [\r\n    {\r\n      id: 1,\r\n      senderId: 1,\r\n      text: 'Hey there! How are you doing?',\r\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 2,\r\n      senderId: 'me',\r\n      text: \"Hi Alice! I'm doing great, thanks for asking. How about you?\",\r\n      timestamp: new Date(Date.now() - 1.5 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 3,\r\n      senderId: 1,\r\n      text: \"I'm doing well too! Just finished a big project at work.\",\r\n      timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 4,\r\n      senderId: 'me',\r\n      text: 'Congratulations! That sounds exciting.',\r\n      timestamp: new Date(Date.now() - 30 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 5,\r\n      senderId: 1,\r\n      text: 'Thanks! Want to grab coffee sometime this week?',\r\n      timestamp: new Date(Date.now() - 5 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'delivered',\r\n    },\r\n  ],\r\n  2: [\r\n    {\r\n      id: 6,\r\n      senderId: 'me',\r\n      text: 'Hey Bob, could you help me with that report?',\r\n      timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 7,\r\n      senderId: 2,\r\n      text: \"Of course! I'll send it over in a few minutes.\",\r\n      timestamp: new Date(Date.now() - 2.5 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 8,\r\n      senderId: 2,\r\n      text: 'Thanks for your help!',\r\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n  ],\r\n  3: [\r\n    {\r\n      id: 9,\r\n      senderId: 3,\r\n      text: 'Can we schedule a meeting?',\r\n      timestamp: new Date(Date.now() - 15 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'delivered',\r\n    },\r\n  ],\r\n  4: [\r\n    {\r\n      id: 10,\r\n      senderId: 4,\r\n      text: 'Great meeting today! Thanks everyone.',\r\n      timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 11,\r\n      senderId: 'me',\r\n      text: 'Agreed! Very productive.',\r\n      timestamp: new Date(Date.now() - 50 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 12,\r\n      senderId: 4,\r\n      text: 'See you tomorrow!',\r\n      timestamp: new Date(Date.now() - 45 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n  ],\r\n  5: [\r\n    {\r\n      id: 13,\r\n      senderId: 'me',\r\n      text: 'Eva, are you ready for the presentation?',\r\n      timestamp: new Date(Date.now() - 10 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 14,\r\n      senderId: 5,\r\n      text: 'Almost! Just finishing up the final slides.',\r\n      timestamp: new Date(Date.now() - 5 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 15,\r\n      senderId: 5,\r\n      text: \"Perfect! Let me know when you're ready.\",\r\n      timestamp: new Date(Date.now() - 1 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'delivered',\r\n    },\r\n  ],\r\n  6: [\r\n    {\r\n      id: 16,\r\n      senderId: 'me',\r\n      text: 'Frank, did you get a chance to review the proposal?',\r\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 17,\r\n      senderId: 6,\r\n      text: 'Yes! It looks really good. I have a few minor suggestions.',\r\n      timestamp: new Date(Date.now() - 1.5 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 18,\r\n      senderId: 'me',\r\n      text: 'Great! Feel free to share them whenever you have time.',\r\n      timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 19,\r\n      senderId: 6,\r\n      text: 'Just saw your message, will reply soon!',\r\n      timestamp: new Date(Date.now() - 8 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'delivered',\r\n    },\r\n  ],\r\n  7: [\r\n    {\r\n      id: 20,\r\n      senderId: 7,\r\n      text: 'Hey! How was your weekend?',\r\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 21,\r\n      senderId: 'me',\r\n      text: 'It was great! Went hiking and had some relaxing time.',\r\n      timestamp: new Date(Date.now() - 3.5 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 22,\r\n      senderId: 7,\r\n      text: 'Looking forward to the weekend!',\r\n      timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n  ],\r\n  8: [\r\n    {\r\n      id: 23,\r\n      senderId: 'me',\r\n      text: 'Henry, I just sent you the quarterly report.',\r\n      timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 24,\r\n      senderId: 8,\r\n      text: 'Thanks for the update! 👍',\r\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 25,\r\n      senderId: 8,\r\n      text: 'The numbers look really promising this quarter.',\r\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n  ],\r\n  9: [\r\n    {\r\n      id: 26,\r\n      senderId: 9,\r\n      text: 'Hi! I uploaded the new design mockups.',\r\n      timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 27,\r\n      senderId: 'me',\r\n      text: \"Awesome! I'll take a look at them shortly.\",\r\n      timestamp: new Date(Date.now() - 50 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 28,\r\n      senderId: 9,\r\n      text: 'Can you check the latest document?',\r\n      timestamp: new Date(Date.now() - 25 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'delivered',\r\n    },\r\n    {\r\n      id: 29,\r\n      senderId: 9,\r\n      text: 'I made some changes based on our discussion.',\r\n      timestamp: new Date(Date.now() - 25 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'delivered',\r\n    },\r\n  ],\r\n  10: [\r\n    {\r\n      id: 30,\r\n      senderId: 10,\r\n      text: 'The client presentation went really well!',\r\n      timestamp: new Date(Date.now() - 7 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 31,\r\n      senderId: 'me',\r\n      text: \"That's fantastic news! What was their feedback?\",\r\n      timestamp: new Date(Date.now() - 6.5 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 32,\r\n      senderId: 10,\r\n      text: 'Great work on the project! 🎉',\r\n      timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n  ],\r\n  11: [\r\n    {\r\n      id: 33,\r\n      senderId: 11,\r\n      text: \"Good morning! Ready for today's sprint planning?\",\r\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 34,\r\n      senderId: 'me',\r\n      text: 'Yes! I have all my tasks prepared.',\r\n      timestamp: new Date(Date.now() - 1.5 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 35,\r\n      senderId: 11,\r\n      text: 'Meeting rescheduled to 3 PM',\r\n      timestamp: new Date(Date.now() - 35 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'delivered',\r\n    },\r\n  ],\r\n  12: [\r\n    {\r\n      id: 36,\r\n      senderId: 12,\r\n      text: 'Thanks for organizing the team lunch yesterday!',\r\n      timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 37,\r\n      senderId: 'me',\r\n      text: 'My pleasure! It was great to catch up with everyone.',\r\n      timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n    {\r\n      id: 38,\r\n      senderId: 12,\r\n      text: 'Have a great day everyone!',\r\n      timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\r\n      type: 'text',\r\n      status: 'read',\r\n    },\r\n  ],\r\n};\r\n\r\nexport const currentUser = {\r\n  id: 'me',\r\n  name: 'You',\r\n  avatar: 'https://i.pravatar.cc/150?img=10',\r\n  status: 'online',\r\n};\r\n","import React from 'react';\r\nimport { Box, Typography, Avatar, IconButton, Badge } from '@mui/material';\r\nimport { MoreVert, Add } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { currentUser } from '../chat.constants';\r\n\r\nconst ChatSidebarHeader = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        p: 2,\r\n        bgcolor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n      }}\r\n    >\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n        <Badge\r\n          overlap='circular'\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n          badgeContent={\r\n            <Box\r\n              sx={{\r\n                width: 12,\r\n                height: 12,\r\n                borderRadius: '50%',\r\n                bgcolor: '#4caf50',\r\n                border: `2px solid ${theme.palette.primary.main}`,\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <Avatar\r\n            src={currentUser.avatar}\r\n            alt={currentUser.name}\r\n            sx={{ width: 40, height: 40 }}\r\n          />\r\n        </Badge>\r\n        <Typography variant='h6' fontWeight='medium'>\r\n          Chats\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n        <IconButton size='small' sx={{ color: 'inherit', mr: 0.5 }}>\r\n          <Add />\r\n        </IconButton>\r\n        <IconButton size='small' sx={{ color: 'inherit' }}>\r\n          <MoreVert />\r\n        </IconButton>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatSidebarHeader;\r\n","// Utility functions for chat feature\r\nimport { format, isToday, isYesterday, differenceInMinutes } from 'date-fns';\r\n\r\n// Format timestamp for display\r\nexport const formatMessageTime = (timestamp) => {\r\n  if (isToday(timestamp)) {\r\n    return format(timestamp, 'HH:mm');\r\n  } else if (isYesterday(timestamp)) {\r\n    return 'Yesterday';\r\n  } else {\r\n    return format(timestamp, 'dd/MM/yyyy');\r\n  }\r\n};\r\n\r\n// Format last seen time\r\nexport const formatLastSeen = (lastSeen) => {\r\n  const minutesAgo = differenceInMinutes(new Date(), lastSeen);\r\n\r\n  if (minutesAgo < 1) {\r\n    return 'Just now';\r\n  } else if (minutesAgo < 60) {\r\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\r\n  } else if (minutesAgo < 1440) {\r\n    // 24 hours\r\n    const hoursAgo = Math.floor(minutesAgo / 60);\r\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\r\n  } else {\r\n    return format(lastSeen, 'dd/MM/yyyy HH:mm');\r\n  }\r\n};\r\n\r\n// Get status color\r\nexport const getStatusColor = (status) => {\r\n  switch (status) {\r\n    case 'online':\r\n      return '#4caf50';\r\n    case 'away':\r\n      return '#ff9800';\r\n    case 'offline':\r\n      return '#9e9e9e';\r\n    default:\r\n      return '#9e9e9e';\r\n  }\r\n};\r\n\r\n// Search users by name\r\nexport const searchUsers = (users, searchTerm) => {\r\n  if (!searchTerm.trim()) return users;\r\n\r\n  return users.filter((user) =>\r\n    user.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n};\r\n\r\n// Sort users by last message time\r\nexport const sortUsersByLastMessage = (users) => {\r\n  return [...users].sort(\r\n    (a, b) => new Date(b.lastMessageTime) - new Date(a.lastMessageTime)\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Avatar,\r\n  Badge,\r\n  Typography,\r\n  Box,\r\n  Chip,\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { formatMessageTime, getStatusColor } from '../chat.utils';\r\n\r\nconst UserListItem = ({ user, isSelected, onClick }) => {\r\n  const theme = useTheme();\r\n\r\n  const getStatusIndicator = () => (\r\n    <Box\r\n      sx={{\r\n        width: 12,\r\n        height: 12,\r\n        borderRadius: '50%',\r\n        bgcolor: getStatusColor(user.status),\r\n        border: `2px solid ${theme.palette.background.paper}`,\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <ListItem\r\n      component='button'\r\n      onClick={onClick}\r\n      selected={isSelected}\r\n      sx={{\r\n        py: 1.5,\r\n        px: 2,\r\n        borderBottom: `1px solid ${theme.palette.divider}`,\r\n        bgcolor: isSelected ? theme.palette.action.selected : 'transparent',\r\n        '&:hover': {\r\n          bgcolor: isSelected\r\n            ? theme.palette.action.selected\r\n            : theme.palette.action.hover,\r\n        },\r\n        cursor: 'pointer',\r\n        border: 'none',\r\n        width: '100%',\r\n        textAlign: 'left',\r\n      }}\r\n    >\r\n      <ListItemAvatar>\r\n        <Badge\r\n          overlap='circular'\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n          badgeContent={getStatusIndicator()}\r\n        >\r\n          <Avatar\r\n            src={user.avatar}\r\n            alt={user.name}\r\n            sx={{ width: 50, height: 50 }}\r\n          />\r\n        </Badge>\r\n      </ListItemAvatar>\r\n\r\n      <ListItemText\r\n        primary={\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              mb: 0.5,\r\n            }}\r\n          >\r\n            <Typography\r\n              variant='subtitle1'\r\n              fontWeight={user.unreadCount > 0 ? 'bold' : 'medium'}\r\n              color={isSelected ? 'primary' : 'textPrimary'}\r\n              noWrap\r\n            >\r\n              {user.name}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              {user.unreadCount > 0 && (\r\n                <Chip\r\n                  label={user.unreadCount}\r\n                  size='small'\r\n                  color='primary'\r\n                  sx={{\r\n                    height: 20,\r\n                    minWidth: 20,\r\n                    '& .MuiChip-label': {\r\n                      fontSize: '0.75rem',\r\n                      px: 1,\r\n                    },\r\n                  }}\r\n                />\r\n              )}\r\n              <Typography variant='caption' color='textSecondary'>\r\n                {formatMessageTime(user.lastMessageTime)}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        }\r\n        secondary={\r\n          <Typography\r\n            variant='body2'\r\n            color='textSecondary'\r\n            noWrap\r\n            fontWeight={user.unreadCount > 0 ? 'medium' : 'normal'}\r\n          >\r\n            {user.lastMessage}\r\n          </Typography>\r\n        }\r\n        sx={{ m: 0 }}\r\n      />\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  InputAdornment,\r\n  List,\r\n  Divider,\r\n} from '@mui/material';\r\nimport { Search } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport ChatSidebarHeader from './ChatSidebarHeader';\r\nimport UserListItem from './UserListItem';\r\nimport { searchUsers } from '../chat.utils';\r\n\r\nconst ChatSidebar = ({\r\n  users,\r\n  selectedUser,\r\n  searchTerm,\r\n  onUserSelect,\r\n  onSearchChange,\r\n}) => {\r\n  const theme = useTheme();\r\n  const filteredUsers = searchUsers(users, searchTerm);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        bgcolor: theme.palette.background.paper,\r\n      }}\r\n    >\r\n      <ChatSidebarHeader />\r\n\r\n      <Box sx={{ p: 2, pb: 1 }}>\r\n        <TextField\r\n          fullWidth\r\n          variant='outlined'\r\n          placeholder='Search conversations...'\r\n          value={searchTerm}\r\n          onChange={(e) => onSearchChange(e.target.value)}\r\n          size='small'\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position='start'>\r\n                <Search color='action' />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          sx={{\r\n            '& .MuiOutlinedInput-root': {\r\n              borderRadius: 3,\r\n              bgcolor: theme.palette.action.hover,\r\n            },\r\n          }}\r\n        />\r\n      </Box>\r\n\r\n      <Divider />\r\n\r\n      <Box sx={{ flex: 1, overflow: 'auto' }}>\r\n        {filteredUsers.length > 0 ? (\r\n          <List sx={{ p: 0 }}>\r\n            {filteredUsers.map((user) => (\r\n              <UserListItem\r\n                key={user.id}\r\n                user={user}\r\n                isSelected={selectedUser?.id === user.id}\r\n                onClick={() => onUserSelect(user)}\r\n              />\r\n            ))}\r\n          </List>\r\n        ) : (\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              height: '100%',\r\n              p: 2,\r\n            }}\r\n          >\r\n            <Typography variant='body2' color='textSecondary' align='center'>\r\n              No conversations found\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatSidebar;\r\n","import React from 'react';\r\nimport { Box, Typography, Avatar, IconButton, Badge } from '@mui/material';\r\nimport { Phone, Videocam, MoreVert, Search } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { getStatusColor, formatLastSeen } from '../chat.utils';\r\n\r\nconst ChatHeader = ({ user }) => {\r\n  const theme = useTheme();\r\n\r\n  const getStatusIndicator = () => (\r\n    <Box\r\n      sx={{\r\n        width: 10,\r\n        height: 10,\r\n        borderRadius: '50%',\r\n        bgcolor: getStatusColor(user.status),\r\n        border: `2px solid ${theme.palette.background.paper}`,\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          p: 2,\r\n          bgcolor: theme.palette.background.paper,\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'space-between',\r\n          borderBottom: `1px solid ${theme.palette.divider}`,\r\n        }}\r\n      >\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n          <Badge\r\n            overlap='circular'\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n            badgeContent={getStatusIndicator()}\r\n          >\r\n            <Avatar\r\n              src={user.avatar}\r\n              alt={user.name}\r\n              sx={{ width: 45, height: 45 }}\r\n            />\r\n          </Badge>\r\n\r\n          <Box>\r\n            <Typography variant='h6' fontWeight='medium'>\r\n              {user.name}\r\n            </Typography>\r\n            <Typography variant='caption' color='textSecondary'>\r\n              {user.status === 'online'\r\n                ? 'Online'\r\n                : `Last seen ${formatLastSeen(user.lastSeen)}`}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <IconButton size='small' color='primary'>\r\n            <Search />\r\n          </IconButton>\r\n          <IconButton size='small' color='primary'>\r\n            <Phone />\r\n          </IconButton>\r\n          <IconButton size='small' color='primary'>\r\n            <Videocam />\r\n          </IconButton>\r\n          <IconButton size='small'>\r\n            <MoreVert />\r\n          </IconButton>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatHeader;\r\n","import React from 'react';\r\nimport { Box, Paper, Typography, Avatar } from '@mui/material';\r\nimport { Done, DoneAll, Schedule } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { formatMessageTime } from '../chat.utils';\r\nimport { mockUsers, currentUser } from '../chat.constants';\r\n\r\nconst MessageBubble = ({ message, showAvatar, showTimestamp, isGrouped }) => {\r\n  const theme = useTheme();\r\n  const isOwnMessage = message.senderId === 'me';\r\n\r\n  // Get sender info\r\n  const sender = isOwnMessage\r\n    ? currentUser\r\n    : mockUsers.find((user) => user.id === message.senderId);\r\n\r\n  const getStatusIcon = () => {\r\n    if (!isOwnMessage) return null;\r\n\r\n    switch (message.status) {\r\n      case 'sent':\r\n        return (\r\n          <Schedule\r\n            sx={{ fontSize: 14, color: theme.palette.text.secondary }}\r\n          />\r\n        );\r\n      case 'delivered':\r\n        return (\r\n          <Done sx={{ fontSize: 14, color: theme.palette.text.secondary }} />\r\n        );\r\n      case 'read':\r\n        return (\r\n          <DoneAll sx={{ fontSize: 14, color: theme.palette.primary.main }} />\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: isOwnMessage ? 'flex-end' : 'flex-start',\r\n        mb: isGrouped ? 0.5 : 1.5,\r\n        alignItems: 'flex-end',\r\n      }}\r\n    >\r\n      {!isOwnMessage && (\r\n        <Avatar\r\n          src={sender?.avatar}\r\n          alt={sender?.name}\r\n          sx={{\r\n            width: 32,\r\n            height: 32,\r\n            mr: 1,\r\n            visibility: showAvatar ? 'visible' : 'hidden',\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <Box\r\n        sx={{\r\n          maxWidth: '70%',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: isOwnMessage ? 'flex-end' : 'flex-start',\r\n        }}\r\n      >\r\n        {showTimestamp && (\r\n          <Typography\r\n            variant='caption'\r\n            color='textSecondary'\r\n            sx={{\r\n              mb: 0.5,\r\n              mx: 1,\r\n              textAlign: isOwnMessage ? 'right' : 'left',\r\n            }}\r\n          >\r\n            {formatMessageTime(message.timestamp)}\r\n          </Typography>\r\n        )}\r\n\r\n        <Paper\r\n          elevation={1}\r\n          sx={{\r\n            p: 1.5,\r\n            bgcolor: isOwnMessage\r\n              ? theme.palette.primary.main\r\n              : theme.palette.background.paper,\r\n            color: isOwnMessage\r\n              ? theme.palette.primary.contrastText\r\n              : theme.palette.text.primary,\r\n            borderRadius: 2,\r\n            borderTopLeftRadius: !isOwnMessage && isGrouped ? 0.5 : 2,\r\n            borderTopRightRadius: isOwnMessage && isGrouped ? 0.5 : 2,\r\n            borderBottomLeftRadius: !isOwnMessage && showAvatar ? 0.5 : 2,\r\n            borderBottomRightRadius: isOwnMessage && showAvatar ? 0.5 : 2,\r\n            position: 'relative',\r\n            wordWrap: 'break-word',\r\n          }}\r\n        >\r\n          <Typography variant='body2'>{message.text}</Typography>\r\n\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'flex-end',\r\n              mt: 0.5,\r\n              gap: 0.5,\r\n            }}\r\n          >\r\n            <Typography\r\n              variant='caption'\r\n              sx={{\r\n                fontSize: '0.7rem',\r\n                color: isOwnMessage\r\n                  ? theme.palette.primary.contrastText\r\n                  : theme.palette.text.secondary,\r\n                opacity: 0.8,\r\n              }}\r\n            >\r\n              {formatMessageTime(message.timestamp)}\r\n            </Typography>\r\n            {getStatusIcon()}\r\n          </Box>\r\n        </Paper>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MessageBubble;\r\n","import React from 'react';\r\nimport { Box, Typography, Avatar } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nconst TypingIndicator = ({ user }) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        alignItems: 'flex-end',\r\n        mb: 1,\r\n        animation: 'fadeIn 0.3s ease-in-out',\r\n        '@keyframes fadeIn': {\r\n          from: { opacity: 0, transform: 'translateY(10px)' },\r\n          to: { opacity: 1, transform: 'translateY(0)' },\r\n        },\r\n      }}\r\n    >\r\n      <Avatar\r\n        src={user?.avatar}\r\n        alt={user?.name}\r\n        sx={{ width: 32, height: 32, mr: 1 }}\r\n      />\r\n\r\n      <Box\r\n        sx={{\r\n          bgcolor: theme.palette.background.paper,\r\n          borderRadius: 2,\r\n          px: 2,\r\n          py: 1,\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          gap: 0.5,\r\n          boxShadow: 1,\r\n        }}\r\n      >\r\n        <Typography variant='body2' color='textSecondary'>\r\n          {user?.name} is typing\r\n        </Typography>\r\n\r\n        <Box sx={{ display: 'flex', gap: 0.25 }}>\r\n          {[1, 2, 3].map((dot) => (\r\n            <Box\r\n              key={dot}\r\n              sx={{\r\n                width: 4,\r\n                height: 4,\r\n                borderRadius: '50%',\r\n                bgcolor: theme.palette.text.secondary,\r\n                animation: `typing 1.4s ease-in-out ${dot * 0.2}s infinite`,\r\n                '@keyframes typing': {\r\n                  '0%, 60%, 100%': {\r\n                    transform: 'translateY(0)',\r\n                    opacity: 0.5,\r\n                  },\r\n                  '30%': {\r\n                    transform: 'translateY(-6px)',\r\n                    opacity: 1,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TypingIndicator;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { Box } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport MessageBubble from './MessageBubble';\r\nimport TypingIndicator from './TypingIndicator';\r\n\r\nconst MessageList = ({ messages, selectedUser, isTyping }) => {\r\n  const theme = useTheme();\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flex: 1,\r\n        overflow: 'auto',\r\n        p: 2,\r\n        bgcolor:\r\n          theme.palette.mode === 'dark'\r\n            ? theme.palette.grey[900]\r\n            : theme.palette.grey[50],\r\n        backgroundImage:\r\n          theme.palette.mode === 'dark'\r\n            ? 'none'\r\n            : 'url(\"data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%23f0f0f0\" fill-opacity=\"0.1\"%3E%3Ccircle cx=\"30\" cy=\"30\" r=\"2\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")',\r\n      }}\r\n    >\r\n      {messages.length === 0 ? (\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            height: '100%',\r\n            color: theme.palette.text.secondary,\r\n          }}\r\n        >\r\n          No messages yet. Start the conversation!\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {messages.map((message, index) => {\r\n            const isFirstMessage = index === 0;\r\n            const isLastMessage = index === messages.length - 1;\r\n            const prevMessage = !isFirstMessage ? messages[index - 1] : null;\r\n            const nextMessage = !isLastMessage ? messages[index + 1] : null;\r\n\r\n            const isSameUser = prevMessage?.senderId === message.senderId;\r\n            const isNextSameUser = nextMessage?.senderId === message.senderId;\r\n\r\n            return (\r\n              <MessageBubble\r\n                key={message.id}\r\n                message={message}\r\n                showAvatar={!isNextSameUser || isLastMessage}\r\n                showTimestamp={!isSameUser || isFirstMessage}\r\n                isGrouped={isSameUser}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {isTyping && selectedUser && <TypingIndicator user={selectedUser} />}\r\n\r\n          <div ref={messagesEndRef} />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MessageList;\r\n","import React, { useState } from 'react';\r\nimport { Box, TextField, IconButton, Paper } from '@mui/material';\r\nimport { Send, AttachFile, EmojiEmotions } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nconst MessageInput = ({ onSendMessage }) => {\r\n  const theme = useTheme();\r\n  const [message, setMessage] = useState('');\r\n\r\n  const handleSend = () => {\r\n    if (message.trim()) {\r\n      onSendMessage(message);\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      elevation={0}\r\n      sx={{\r\n        p: 2,\r\n        bgcolor: theme.palette.background.paper,\r\n        borderTop: `1px solid ${theme.palette.divider}`,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'flex-end',\r\n          gap: 1,\r\n        }}\r\n      >\r\n        <IconButton size='small' color='primary' sx={{ mb: 0.5 }}>\r\n          <AttachFile />\r\n        </IconButton>\r\n\r\n        <TextField\r\n          fullWidth\r\n          multiline\r\n          maxRows={4}\r\n          variant='outlined'\r\n          placeholder='Type a message...'\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          size='small'\r\n          sx={{\r\n            '& .MuiOutlinedInput-root': {\r\n              borderRadius: 3,\r\n              bgcolor: theme.palette.action.hover,\r\n              '& fieldset': {\r\n                border: `1px solid ${theme.palette.divider}`,\r\n              },\r\n              '&:hover fieldset': {\r\n                borderColor: theme.palette.primary.main,\r\n              },\r\n              '&.Mui-focused fieldset': {\r\n                borderColor: theme.palette.primary.main,\r\n              },\r\n            },\r\n          }}\r\n        />\r\n\r\n        <IconButton size='small' color='primary' sx={{ mb: 0.5 }}>\r\n          <EmojiEmotions />\r\n        </IconButton>\r\n\r\n        <IconButton\r\n          size='small'\r\n          color='primary'\r\n          onClick={handleSend}\r\n          disabled={!message.trim()}\r\n          sx={{\r\n            mb: 0.5,\r\n            bgcolor: message.trim()\r\n              ? theme.palette.primary.main\r\n              : 'transparent',\r\n            color: message.trim()\r\n              ? theme.palette.primary.contrastText\r\n              : 'inherit',\r\n            '&:hover': {\r\n              bgcolor: message.trim()\r\n                ? theme.palette.primary.dark\r\n                : theme.palette.action.hover,\r\n            },\r\n          }}\r\n        >\r\n          <Send />\r\n        </IconButton>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import React from 'react';\r\nimport { Box, Typography, Paper } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport ChatHeader from './ChatHeader';\r\nimport MessageList from './MessageList';\r\nimport MessageInput from './MessageInput';\r\n\r\nconst ChatWindow = ({ selectedUser, messages, onSendMessage, isTyping }) => {\r\n  const theme = useTheme();\r\n\r\n  if (!selectedUser) {\r\n    return (\r\n      <Box\r\n        sx={{\r\n          height: '100%',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          bgcolor: theme.palette.background.default,\r\n        }}\r\n      >\r\n        <Paper\r\n          elevation={0}\r\n          sx={{\r\n            p: 4,\r\n            textAlign: 'center',\r\n            bgcolor: 'transparent',\r\n          }}\r\n        >\r\n          <Typography variant='h5' color='textSecondary' gutterBottom>\r\n            Welcome to Chat\r\n          </Typography>\r\n          <Typography variant='body1' color='textSecondary'>\r\n            Select a conversation to start messaging\r\n          </Typography>\r\n        </Paper>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        bgcolor: theme.palette.background.default,\r\n      }}\r\n    >\r\n      <ChatHeader user={selectedUser} />\r\n\r\n      <Box\r\n        sx={{\r\n          flex: 1,\r\n          overflow: 'hidden',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <MessageList\r\n          messages={messages}\r\n          selectedUser={selectedUser}\r\n          isTyping={isTyping}\r\n        />\r\n        <MessageInput onSendMessage={onSendMessage} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React from 'react';\r\nimport { Box, Chip } from '@mui/material';\r\nimport { Wifi, WifiOff } from '@mui/icons-material';\r\n\r\nconst ConnectionStatus = ({ isConnected }) => {\r\n  return (\r\n    <Box sx={{ position: 'absolute', top: 8, right: 8, zIndex: 1000 }}>\r\n      <Chip\r\n        icon={isConnected ? <Wifi /> : <WifiOff />}\r\n        label={isConnected ? 'Connected' : 'Offline'}\r\n        color={isConnected ? 'success' : 'error'}\r\n        variant='outlined'\r\n        size='small'\r\n        sx={{\r\n          bgcolor: 'background.paper',\r\n          '& .MuiChip-icon': {\r\n            color: isConnected ? 'success.main' : 'error.main',\r\n          },\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ConnectionStatus;\r\n","import { io } from 'socket.io-client';\r\n\r\nclass WebSocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n    this.messageCallbacks = [];\r\n    this.statusCallbacks = [];\r\n    this.connectionCallbacks = [];\r\n  }\r\n\r\n  // Initialize WebSocket connection\r\n  connect(url = 'ws://localhost:3001') {\r\n    try {\r\n      this.socket = io(url, {\r\n        autoConnect: false,\r\n        reconnection: true,\r\n        reconnectionDelay: 1000,\r\n        reconnectionAttempts: 5,\r\n        timeout: 20000,\r\n      });\r\n\r\n      this.setupEventListeners();\r\n      this.socket.connect();\r\n    } catch (error) {\r\n      console.error('WebSocket connection failed:', error);\r\n      // For demo purposes, we'll simulate WebSocket events\r\n      this.simulateConnection();\r\n    }\r\n  }\r\n\r\n  // Setup event listeners\r\n  setupEventListeners() {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('Connected to WebSocket server');\r\n      this.isConnected = true;\r\n      this.notifyConnectionCallbacks(true);\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('Disconnected from WebSocket server');\r\n      this.isConnected = false;\r\n      this.notifyConnectionCallbacks(false);\r\n    });\r\n\r\n    this.socket.on('message', (message) => {\r\n      this.notifyMessageCallbacks(message);\r\n    });\r\n\r\n    this.socket.on('messageStatus', (status) => {\r\n      this.notifyStatusCallbacks(status);\r\n    });\r\n\r\n    this.socket.on('userTyping', (data) => {\r\n      // Handle typing indicators\r\n      console.log('User typing:', data);\r\n    });\r\n\r\n    this.socket.on('userOnline', (userId) => {\r\n      // Handle user online status\r\n      console.log('User online:', userId);\r\n    });\r\n\r\n    this.socket.on('userOffline', (userId) => {\r\n      // Handle user offline status\r\n      console.log('User offline:', userId);\r\n    });\r\n  }\r\n\r\n  // Simulate connection for demo purposes\r\n  simulateConnection() {\r\n    setTimeout(() => {\r\n      console.log('Simulating WebSocket connection');\r\n      this.isConnected = true;\r\n      this.notifyConnectionCallbacks(true);\r\n\r\n      // Simulate receiving a message after 5 seconds\r\n      setTimeout(() => {\r\n        this.simulateIncomingMessage();\r\n      }, 5000);\r\n    }, 1000);\r\n  }\r\n\r\n  // Simulate incoming message\r\n  simulateIncomingMessage() {\r\n    const simulatedMessage = {\r\n      id: Date.now(),\r\n      senderId: 1,\r\n      text: 'This is a simulated WebSocket message!',\r\n      timestamp: new Date(),\r\n      type: 'text',\r\n      status: 'delivered',\r\n    };\r\n\r\n    this.notifyMessageCallbacks(simulatedMessage);\r\n  }\r\n\r\n  // Send message\r\n  sendMessage(message) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('sendMessage', message);\r\n    } else {\r\n      console.log('WebSocket not connected, message not sent:', message);\r\n      // For demo purposes, simulate message sent\r\n      setTimeout(() => {\r\n        this.notifyStatusCallbacks({\r\n          messageId: message.id,\r\n          status: 'delivered',\r\n        });\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  // Join chat room\r\n  joinRoom(roomId) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('joinRoom', roomId);\r\n    }\r\n  }\r\n\r\n  // Leave chat room\r\n  leaveRoom(roomId) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('leaveRoom', roomId);\r\n    }\r\n  }\r\n\r\n  // Send typing indicator\r\n  sendTyping(recipientId, isTyping) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('typing', { recipientId, isTyping });\r\n    }\r\n  }\r\n\r\n  // Register callback for new messages\r\n  onMessage(callback) {\r\n    this.messageCallbacks.push(callback);\r\n    return () => {\r\n      const index = this.messageCallbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        this.messageCallbacks.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  // Register callback for message status updates\r\n  onMessageStatus(callback) {\r\n    this.statusCallbacks.push(callback);\r\n    return () => {\r\n      const index = this.statusCallbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        this.statusCallbacks.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  // Register callback for connection status\r\n  onConnection(callback) {\r\n    this.connectionCallbacks.push(callback);\r\n    return () => {\r\n      const index = this.connectionCallbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        this.connectionCallbacks.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  // Notify message callbacks\r\n  notifyMessageCallbacks(message) {\r\n    this.messageCallbacks.forEach((callback) => {\r\n      try {\r\n        callback(message);\r\n      } catch (error) {\r\n        console.error('Error in message callback:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Notify status callbacks\r\n  notifyStatusCallbacks(status) {\r\n    this.statusCallbacks.forEach((callback) => {\r\n      try {\r\n        callback(status);\r\n      } catch (error) {\r\n        console.error('Error in status callback:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Notify connection callbacks\r\n  notifyConnectionCallbacks(isConnected) {\r\n    this.connectionCallbacks.forEach((callback) => {\r\n      try {\r\n        callback(isConnected);\r\n      } catch (error) {\r\n        console.error('Error in connection callback:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Disconnect\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n    this.isConnected = false;\r\n    this.messageCallbacks = [];\r\n    this.statusCallbacks = [];\r\n    this.connectionCallbacks = [];\r\n  }\r\n\r\n  // Get connection status\r\n  getConnectionStatus() {\r\n    return this.isConnected;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst webSocketService = new WebSocketService();\r\n\r\nexport default webSocketService;\r\n","import React, {\r\n  createContext,\r\n  useContext,\r\n  useReducer,\r\n  useEffect,\r\n  useCallback,\r\n} from 'react';\r\nimport webSocketService from '../services/WebSocketService';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  users: [],\r\n  messages: {},\r\n  selectedUser: null,\r\n  isConnected: false,\r\n  isTyping: {},\r\n  searchTerm: '',\r\n};\r\n\r\n// Action types\r\nconst ActionTypes = {\r\n  SET_USERS: 'SET_USERS',\r\n  SET_MESSAGES: 'SET_MESSAGES',\r\n  ADD_MESSAGE: 'ADD_MESSAGE',\r\n  UPDATE_MESSAGE_STATUS: 'UPDATE_MESSAGE_STATUS',\r\n  SELECT_USER: 'SELECT_USER',\r\n  SET_CONNECTION_STATUS: 'SET_CONNECTION_STATUS',\r\n  SET_TYPING_STATUS: 'SET_TYPING_STATUS',\r\n  SET_SEARCH_TERM: 'SET_SEARCH_TERM',\r\n  UPDATE_USER_LAST_MESSAGE: 'UPDATE_USER_LAST_MESSAGE',\r\n  MARK_MESSAGES_AS_READ: 'MARK_MESSAGES_AS_READ',\r\n};\r\n\r\n// Reducer\r\nconst chatReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.payload,\r\n      };\r\n\r\n    case ActionTypes.SET_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: action.payload,\r\n      };\r\n\r\n    case ActionTypes.ADD_MESSAGE:\r\n      const { userId, message } = action.payload;\r\n      return {\r\n        ...state,\r\n        messages: {\r\n          ...state.messages,\r\n          [userId]: [...(state.messages[userId] || []), message],\r\n        },\r\n      };\r\n\r\n    case ActionTypes.UPDATE_MESSAGE_STATUS:\r\n      const { messageId, status } = action.payload;\r\n      const updatedMessages = { ...state.messages };\r\n\r\n      Object.keys(updatedMessages).forEach((userId) => {\r\n        updatedMessages[userId] = updatedMessages[userId].map((msg) =>\r\n          msg.id === messageId ? { ...msg, status } : msg\r\n        );\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        messages: updatedMessages,\r\n      };\r\n\r\n    case ActionTypes.SELECT_USER:\r\n      return {\r\n        ...state,\r\n        selectedUser: action.payload,\r\n      };\r\n\r\n    case ActionTypes.SET_CONNECTION_STATUS:\r\n      return {\r\n        ...state,\r\n        isConnected: action.payload,\r\n      };\r\n\r\n    case ActionTypes.SET_TYPING_STATUS:\r\n      return {\r\n        ...state,\r\n        isTyping: {\r\n          ...state.isTyping,\r\n          [action.payload.userId]: action.payload.isTyping,\r\n        },\r\n      };\r\n\r\n    case ActionTypes.SET_SEARCH_TERM:\r\n      return {\r\n        ...state,\r\n        searchTerm: action.payload,\r\n      };\r\n\r\n    case ActionTypes.UPDATE_USER_LAST_MESSAGE:\r\n      const {\r\n        userId: updateUserId,\r\n        lastMessage,\r\n        lastMessageTime,\r\n      } = action.payload;\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) =>\r\n          user.id === updateUserId\r\n            ? { ...user, lastMessage, lastMessageTime }\r\n            : user\r\n        ),\r\n      };\r\n\r\n    case ActionTypes.MARK_MESSAGES_AS_READ:\r\n      const readUserId = action.payload;\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) =>\r\n          user.id === readUserId ? { ...user, unreadCount: 0 } : user\r\n        ),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst ChatContext = createContext();\r\n\r\n// Custom hook to use chat context\r\nexport const useChat = () => {\r\n  const context = useContext(ChatContext);\r\n  if (!context) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Chat provider component\r\nexport const ChatProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(chatReducer, initialState);\r\n\r\n  // Initialize WebSocket connection\r\n  useEffect(() => {\r\n    webSocketService.connect();\r\n\r\n    // Setup event listeners\r\n    const unsubscribeMessage = webSocketService.onMessage((message) => {\r\n      dispatch({\r\n        type: ActionTypes.ADD_MESSAGE,\r\n        payload: {\r\n          userId: message.senderId,\r\n          message,\r\n        },\r\n      });\r\n\r\n      // Update user's last message\r\n      dispatch({\r\n        type: ActionTypes.UPDATE_USER_LAST_MESSAGE,\r\n        payload: {\r\n          userId: message.senderId,\r\n          lastMessage: message.text,\r\n          lastMessageTime: message.timestamp,\r\n        },\r\n      });\r\n    });\r\n\r\n    const unsubscribeStatus = webSocketService.onMessageStatus(\r\n      (statusUpdate) => {\r\n        dispatch({\r\n          type: ActionTypes.UPDATE_MESSAGE_STATUS,\r\n          payload: statusUpdate,\r\n        });\r\n      }\r\n    );\r\n\r\n    const unsubscribeConnection = webSocketService.onConnection(\r\n      (isConnected) => {\r\n        dispatch({\r\n          type: ActionTypes.SET_CONNECTION_STATUS,\r\n          payload: isConnected,\r\n        });\r\n      }\r\n    );\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      unsubscribeMessage();\r\n      unsubscribeStatus();\r\n      unsubscribeConnection();\r\n      webSocketService.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  // Actions\r\n  const setUsers = useCallback((users) => {\r\n    dispatch({\r\n      type: ActionTypes.SET_USERS,\r\n      payload: users,\r\n    });\r\n  }, []);\r\n\r\n  const setMessages = useCallback((messages) => {\r\n    dispatch({\r\n      type: ActionTypes.SET_MESSAGES,\r\n      payload: messages,\r\n    });\r\n  }, []);\r\n\r\n  const sendMessage = useCallback(\r\n    (messageText) => {\r\n      if (!state.selectedUser || !messageText.trim()) return;\r\n\r\n      const message = {\r\n        id: Date.now(),\r\n        senderId: 'me',\r\n        text: messageText,\r\n        timestamp: new Date(),\r\n        type: 'text',\r\n        status: 'sent',\r\n      };\r\n\r\n      // Add message to local state\r\n      dispatch({\r\n        type: ActionTypes.ADD_MESSAGE,\r\n        payload: {\r\n          userId: state.selectedUser.id,\r\n          message,\r\n        },\r\n      });\r\n\r\n      // Update user's last message\r\n      dispatch({\r\n        type: ActionTypes.UPDATE_USER_LAST_MESSAGE,\r\n        payload: {\r\n          userId: state.selectedUser.id,\r\n          lastMessage: messageText,\r\n          lastMessageTime: new Date(),\r\n        },\r\n      });\r\n\r\n      // Send via WebSocket\r\n      webSocketService.sendMessage({\r\n        ...message,\r\n        recipientId: state.selectedUser.id,\r\n      });\r\n    },\r\n    [state.selectedUser]\r\n  );\r\n\r\n  const selectUser = useCallback((user) => {\r\n    dispatch({\r\n      type: ActionTypes.SELECT_USER,\r\n      payload: user,\r\n    });\r\n\r\n    // Mark messages as read\r\n    if (user) {\r\n      dispatch({\r\n        type: ActionTypes.MARK_MESSAGES_AS_READ,\r\n        payload: user.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const setSearchTerm = useCallback((term) => {\r\n    dispatch({\r\n      type: ActionTypes.SET_SEARCH_TERM,\r\n      payload: term,\r\n    });\r\n  }, []);\r\n\r\n  const setTypingStatus = useCallback((userId, isTyping) => {\r\n    dispatch({\r\n      type: ActionTypes.SET_TYPING_STATUS,\r\n      payload: { userId, isTyping },\r\n    });\r\n\r\n    // Send typing status via WebSocket\r\n    webSocketService.sendTyping(userId, isTyping);\r\n  }, []);\r\n\r\n  const value = {\r\n    ...state,\r\n    setUsers,\r\n    setMessages,\r\n    sendMessage,\r\n    selectUser,\r\n    setSearchTerm,\r\n    setTypingStatus,\r\n  };\r\n\r\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\r\n};\r\n\r\nexport default ChatContext;\r\n","import React, { useEffect } from 'react';\r\nimport { Grid, Box, Paper } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport ChatSidebar from './components/ChatSidebar';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport ConnectionStatus from './components/ConnectionStatus';\r\nimport { ChatProvider, useChat } from './context/ChatContext';\r\nimport { mockUsers, mockMessages } from './chat.constants';\r\nimport { sortUsersByLastMessage } from './chat.utils';\r\n\r\nconst ChatContent = () => {\r\n  const theme = useTheme();\r\n  const {\r\n    users,\r\n    selectedUser,\r\n    messages,\r\n    searchTerm,\r\n    isTyping,\r\n    isConnected,\r\n    setUsers,\r\n    setMessages,\r\n    selectUser,\r\n    sendMessage,\r\n    setSearchTerm,\r\n  } = useChat();\r\n\r\n  useEffect(() => {\r\n    // Only initialize if users array is empty to prevent re-initialization\r\n    if (users.length === 0) {\r\n      setUsers(sortUsersByLastMessage(mockUsers));\r\n      setMessages(mockMessages);\r\n      // Auto-select first user\r\n      if (mockUsers.length > 0) {\r\n        selectUser(mockUsers[0]);\r\n      }\r\n    }\r\n  }, [users.length, setUsers, setMessages, selectUser]);\r\n\r\n  return (\r\n    <Box sx={{ height: 'calc(100vh - 120px)', position: 'relative' }}>\r\n      <ConnectionStatus isConnected={isConnected} />\r\n      <Paper\r\n        elevation={3}\r\n        sx={{\r\n          height: '100%',\r\n          overflow: 'hidden',\r\n        }}\r\n      >\r\n        <Grid container sx={{ height: '100%' }}>\r\n          <Grid\r\n            size={{ xs: 12, md: 4, lg: 3 }}\r\n            sx={{\r\n              borderRight: `1px solid ${theme.palette.divider}`,\r\n              height: '100%',\r\n            }}\r\n          >\r\n            <ChatSidebar\r\n              users={users}\r\n              selectedUser={selectedUser}\r\n              searchTerm={searchTerm}\r\n              onUserSelect={selectUser}\r\n              onSearchChange={setSearchTerm}\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 12, md: 8, lg: 9 }} sx={{ height: '100%' }}>\r\n            <ChatWindow\r\n              selectedUser={selectedUser}\r\n              messages={messages[selectedUser?.id] || []}\r\n              onSendMessage={sendMessage}\r\n              isTyping={isTyping[selectedUser?.id] || false}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Chat = () => {\r\n  return (\r\n    <ChatProvider>\r\n      <ChatContent />\r\n    </ChatProvider>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"names":["mockUsers","id","name","avatar","status","lastSeen","Date","lastMessage","lastMessageTime","now","unreadCount","mockMessages","senderId","text","timestamp","type","currentUser","ChatSidebarHeader","theme","useTheme","_jsxs","Box","sx","p","bgcolor","palette","primary","main","color","contrastText","display","alignItems","justifyContent","children","gap","_jsx","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","width","height","borderRadius","border","concat","Avatar","src","alt","Typography","variant","fontWeight","IconButton","size","mr","Add","MoreVert","formatMessageTime","isToday","format","isYesterday","formatLastSeen","minutesAgo","differenceInMinutes","hoursAgo","Math","floor","getStatusColor","_ref","user","isSelected","onClick","ListItem","component","selected","py","px","borderBottom","divider","action","hover","cursor","textAlign","ListItemAvatar","background","paper","ListItemText","mb","noWrap","Chip","label","minWidth","fontSize","secondary","m","users","selectedUser","searchTerm","onUserSelect","onSearchChange","filteredUsers","searchUsers","trim","filter","toLowerCase","includes","flexDirection","pb","TextField","fullWidth","placeholder","value","onChange","e","target","InputProps","startAdornment","InputAdornment","position","Search","Divider","flex","overflow","length","List","map","UserListItem","align","_Fragment","Phone","Videocam","message","showAvatar","showTimestamp","isGrouped","isOwnMessage","sender","find","visibility","maxWidth","mx","Paper","elevation","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","wordWrap","mt","opacity","getStatusIcon","Schedule","Done","DoneAll","animation","from","transform","to","boxShadow","dot","messages","isTyping","messagesEndRef","useRef","useEffect","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","mode","grey","backgroundImage","index","isFirstMessage","isLastMessage","prevMessage","nextMessage","isSameUser","isNextSameUser","MessageBubble","TypingIndicator","ref","onSendMessage","setMessage","useState","handleSend","borderTop","AttachFile","multiline","maxRows","onKeyPress","key","shiftKey","preventDefault","borderColor","EmojiEmotions","disabled","dark","Send","default","ChatHeader","MessageList","MessageInput","gutterBottom","isConnected","top","right","zIndex","icon","Wifi","WifiOff","constructor","this","socket","messageCallbacks","statusCallbacks","connectionCallbacks","connect","url","arguments","undefined","io","autoConnect","reconnection","reconnectionDelay","reconnectionAttempts","timeout","setupEventListeners","error","console","simulateConnection","on","log","notifyConnectionCallbacks","notifyMessageCallbacks","notifyStatusCallbacks","data","userId","setTimeout","simulateIncomingMessage","simulatedMessage","sendMessage","emit","messageId","joinRoom","roomId","leaveRoom","sendTyping","recipientId","onMessage","callback","push","indexOf","splice","onMessageStatus","onConnection","forEach","disconnect","getConnectionStatus","initialState","ActionTypes","chatReducer","state","_objectSpread","payload","updatedMessages","Object","keys","msg","updateUserId","readUserId","ChatContext","createContext","ChatProvider","dispatch","useReducer","webSocketService","unsubscribeMessage","unsubscribeStatus","statusUpdate","unsubscribeConnection","setUsers","useCallback","setMessages","messageText","selectUser","setSearchTerm","term","setTypingStatus","Provider","ChatContent","useChat","context","useContext","Error","sort","a","b","sortUsersByLastMessage","ConnectionStatus","Grid","container","xs","md","lg","borderRight","ChatSidebar","ChatWindow","Chat"],"sourceRoot":""}